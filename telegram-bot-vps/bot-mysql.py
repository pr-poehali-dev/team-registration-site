import os
import json
import pymysql
from pymysql.cursors import DictCursor
import random
import string
from flask import Flask, request
import requests

app = Flask(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
DB_HOST = os.environ.get('DB_HOST', 'localhost')
DB_USER = os.environ.get('DB_USER')
DB_PASSWORD = os.environ.get('DB_PASSWORD')
DB_NAME = os.environ.get('DB_NAME')
WEBHOOK_URL = os.environ.get('WEBHOOK_URL')

def get_db_connection():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MySQL"""
    return pymysql.connect(
        host=DB_HOST,
        user=DB_USER,
        password=DB_PASSWORD,
        database=DB_NAME,
        cursorclass=DictCursor
    )

def save_telegram_user(username, chat_id, first_name):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram"""
    if not username:
        return
    
    conn = get_db_connection()
    try:
        with conn.cursor() as cur:
            cur.execute("""
                INSERT INTO telegram_users (username, chat_id, first_name)
                VALUES (%s, %s, %s)
                ON DUPLICATE KEY UPDATE 
                    chat_id = VALUES(chat_id), 
                    first_name = VALUES(first_name),
                    updated_at = CURRENT_TIMESTAMP
            """, (username, chat_id, first_name))
            conn.commit()
    finally:
        conn.close()

def send_message(chat_id, text, parse_mode='HTML', reply_markup=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
    url = f'https://api.telegram.org/bot{BOT_TOKEN}/sendMessage'
    data = {
        'chat_id': chat_id,
        'text': text,
        'parse_mode': parse_mode
    }
    if reply_markup:
        data['reply_markup'] = json.dumps(reply_markup)
    
    response = requests.post(url, json=data)
    return response.json()

def handle_start(chat_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    send_message(chat_id, 
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥ –Ω–∞ —Ç—É—Ä–Ω–∏—Ä.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /myteam —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à—É –∫–æ–º–∞–Ω–¥—É.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–º–æ—â–∏."
    )

def handle_help(chat_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
    send_message(chat_id,
        "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "/register - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã\n"
        "/myteam - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )

def handle_myteam(chat_id, telegram_username):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not telegram_username:
        send_message(chat_id, 
            "‚ùå –£ –≤–∞—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username –≤ Telegram. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ username –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram."
        )
        return
    
    conn = get_db_connection()
    try:
        with conn.cursor() as cur:
            cur.execute("""
                SELECT team_name, captain_name, members_info, status, admin_comment, auth_code
                FROM teams 
                WHERE captain_telegram = %s
            """, (f'@{telegram_username}',))
            team = cur.fetchone()
        
        if team:
            status_text = {
                'pending': '‚è≥ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏',
                'approved': '‚úÖ –û–¥–æ–±—Ä–µ–Ω–∞',
                'rejected': '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞'
            }.get(team['status'], team['status'])
            
            response = (
                f"üèÜ –í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞: {team['team_name']}\n"
                f"üë§ –ö–∞–ø–∏—Ç–∞–Ω: {team['captain_name']}\n"
                f"üìä –°—Ç–∞—Ç—É—Å: {status_text}\n"
                f"üîë –ö–æ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: <code>{team['auth_code']}</code>\n\n"
                f"üë• –°–æ—Å—Ç–∞–≤:\n{team['members_info']}"
            )
            
            if team['admin_comment']:
                response += f"\n\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n{team['admin_comment']}"
            
            send_message(chat_id, response)
        else:
            send_message(chat_id, 
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
            )
    finally:
        conn.close()

def handle_register(chat_id):
    """–ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—ã"""
    send_message(chat_id,
        "üìù <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã</b>\n\n"
        "–î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç:\n"
        "https://ce876244.tw1.ru/\n\n"
        "–¢–∞–º –≤—ã —Å–º–æ–∂–µ—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –ø–æ–ª–Ω—ã–º —Å–æ—Å—Ç–∞–≤–æ–º –∫–æ–º–∞–Ω–¥—ã."
    )

@app.route('/webhook', methods=['POST'])
def webhook():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç Telegram"""
    if not BOT_TOKEN or not DB_NAME:
        return {'error': 'Configuration error'}, 500
    
    update = request.get_json()
    
    if 'message' not in update:
        return {'ok': True}
    
    message = update['message']
    chat_id = message['chat']['id']
    text = message.get('text', '')
    telegram_username = message['from'].get('username', '')
    first_name = message['from'].get('first_name', '')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ª—é–±–æ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏
    if telegram_username:
        save_telegram_user(telegram_username, chat_id, first_name)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
    if text.startswith('/start'):
        handle_start(chat_id)
    elif text.startswith('/help'):
        handle_help(chat_id)
    elif text.startswith('/myteam'):
        handle_myteam(chat_id, telegram_username)
    elif text.startswith('/register'):
        handle_register(chat_id)
    
    return {'ok': True}

@app.route('/notify-captain', methods=['POST'])
def notify_captain():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–ø–∏—Ç–∞–Ω—É –∫–æ–º–∞–Ω–¥—ã"""
    data = request.get_json()
    
    captain_telegram = data.get('captain_telegram', '').lstrip('@')
    message_text = data.get('message')
    
    if not captain_telegram or not message_text:
        return {'error': 'Missing captain_telegram or message'}, 400
    
    conn = get_db_connection()
    try:
        with conn.cursor() as cur:
            cur.execute("""
                SELECT chat_id FROM telegram_users 
                WHERE username = %s
            """, (captain_telegram,))
            user = cur.fetchone()
        
        if user:
            send_message(user['chat_id'], message_text)
            return {'success': True, 'sent': True}
        else:
            return {'success': True, 'sent': False, 'reason': 'User not found'}
    finally:
        conn.close()

@app.route('/health', methods=['GET'])
def health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Ç–∞"""
    return {'status': 'ok', 'bot': 'running'}

@app.route('/setup-webhook', methods=['GET'])
def setup_webhook():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑)"""
    if not WEBHOOK_URL:
        return {'error': 'WEBHOOK_URL not configured'}, 400
    
    url = f'https://api.telegram.org/bot{BOT_TOKEN}/setWebhook'
    response = requests.post(url, json={'url': f'{WEBHOOK_URL}/webhook'})
    return response.json()

if __name__ == '__main__':
    # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    app.run(host='0.0.0.0', port=5000, debug=True)
