<?php
header('Content-Type: application/json');
header('Access-Control-Allow-Origin: *');
header('Access-Control-Allow-Methods: POST, OPTIONS');
header('Access-Control-Allow-Headers: Content-Type');

if ($_SERVER['REQUEST_METHOD'] === 'OPTIONS') {
    http_response_code(200);
    exit;
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
$bot_token = '8008657360:AAGUdeZTn_s0YMfB7LjQHSKd0cGXnt5yxds';
$db_host = 'localhost';
$db_name = 'ce876244_tournam';
$db_user = 'ce876244_tournam';
$db_pass = 'kh5-XQi-EWE-9gS';

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
try {
    $pdo = new PDO("mysql:host=$db_host;dbname=$db_name;charset=utf8mb4", $db_user, $db_pass);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
} catch (PDOException $e) {
    http_response_code(500);
    echo json_encode(['error' => 'Database connection failed']);
    exit;
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
function sendMessage($bot_token, $chat_id, $text, $parse_mode = 'HTML', $reply_markup = null) {
    $url = "https://api.telegram.org/bot{$bot_token}/sendMessage";
    
    $data = [
        'chat_id' => $chat_id,
        'text' => $text,
        'parse_mode' => $parse_mode
    ];
    
    if ($reply_markup) {
        $data['reply_markup'] = $reply_markup;
    }
    
    $options = [
        'http' => [
            'header'  => "Content-type: application/json\r\n",
            'method'  => 'POST',
            'content' => json_encode($data)
        ]
    ];
    
    $context = stream_context_create($options);
    $result = file_get_contents($url, false, $context);
    return json_decode($result, true);
}

$method = $_SERVER['REQUEST_METHOD'];

if ($method === 'POST') {
    $data = json_decode(file_get_contents('php://input'), true);
    
    $team_id = $data['team_id'] ?? null;
    $action = $data['action'] ?? 'change_request'; // change_request, status_update, admin_comment, send_auth_code
    $changes = $data['changes'] ?? [];
    $old_values = $data['old_values'] ?? [];
    $new_status = $data['new_status'] ?? null;
    $comment = $data['comment'] ?? null;
    
    if (!$team_id) {
        http_response_code(400);
        echo json_encode(['error' => 'team_id required']);
        exit;
    }
    
    // –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    $stmt = $pdo->prepare("SELECT * FROM teams WHERE id = ?");
    $stmt->execute([$team_id]);
    $team = $stmt->fetch(PDO::FETCH_ASSOC);
    
    if (!$team) {
        http_response_code(404);
        echo json_encode(['error' => 'Team not found']);
        exit;
    }
    
    // –ü–æ–ª—É—á–∏—Ç—å chat_id –∫–∞–ø–∏—Ç–∞–Ω–∞
    $captain_username = str_replace('@', '', $team['captain_telegram']);
    $stmt = $pdo->prepare("SELECT chat_id FROM telegram_users WHERE username = ?");
    $stmt->execute([$captain_username]);
    $user = $stmt->fetch(PDO::FETCH_ASSOC);
    
    if (!$user || !$user['chat_id']) {
        echo json_encode(['success' => false, 'error' => 'Captain not found in Telegram']);
        exit;
    }
    
    $chat_id = $user['chat_id'];
    
    // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–µ–π—Å—Ç–≤–∏—è
    if ($action === 'change_request') {
        // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ pending_changes
        $stmt = $pdo->prepare(
            "INSERT INTO pending_changes (team_id, changes, old_values, created_at) 
             VALUES (?, ?, ?, NOW())"
        );
        $stmt->execute([
            $team_id,
            json_encode($changes),
            json_encode($old_values)
        ]);
        
        // –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
        $changes_text = "";
        $field_names = [
            'team_name' => '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã',
            'captain_name' => '–ò–º—è –∫–∞–ø–∏—Ç–∞–Ω–∞',
            'captain_telegram' => 'Telegram –∫–∞–ø–∏—Ç–∞–Ω–∞',
            'members_info' => '–°–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥—ã'
        ];
        
        foreach ($changes as $field => $new_value) {
            $field_label = $field_names[$field] ?? $field;
            $old_value = $old_values[$field] ?? '–Ω–µ —É–∫–∞–∑–∞–Ω–æ';
            
            if ($field === 'members_info') {
                $changes_text .= "\n\n<b>{$field_label}:</b>\n";
                $changes_text .= "–°—Ç–∞—Ä—ã–π:\n<code>{$old_value}</code>\n\n";
                $changes_text .= "–ù–æ–≤—ã–π:\n<code>{$new_value}</code>";
            } else {
                $changes_text .= "\n\n<b>{$field_label}:</b>\n";
                $changes_text .= "–ë—ã–ª–æ: <code>{$old_value}</code>\n";
                $changes_text .= "–°—Ç–∞–ª–æ: <code>{$new_value}</code>";
            }
        }
        
        $message = 
            "‚ö†Ô∏è <b>–ó–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥—ã</b>\n\n" .
            "–ö–æ–º–∞–Ω–¥–∞: <b>{$team['team_name']}</b>\n" .
            $changes_text . "\n\n" .
            "–í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —ç—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è?";
        
        $keyboard = [
            'inline_keyboard' => [
                [
                    ['text' => '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', 'callback_data' => "approve_change_{$team_id}"],
                    ['text' => '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', 'callback_data' => "reject_change_{$team_id}"]
                ]
            ]
        ];
        
        sendMessage($bot_token, $chat_id, $message, 'HTML', $keyboard);
        echo json_encode(['success' => true, 'message' => 'Notification sent']);
    }
    
    elseif ($action === 'status_update') {
        $status_emoji = [
            'approved' => '‚úÖ',
            'rejected' => '‚ùå',
            'pending' => '‚è≥'
        ];
        
        $status_text = [
            'approved' => '–æ–¥–æ–±—Ä–µ–Ω–∞',
            'rejected' => '–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞',
            'pending' => '–Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏'
        ];
        
        $emoji = $status_emoji[$new_status] ?? 'üìä';
        $status = $status_text[$new_status] ?? $new_status;
        
        $message = 
            "{$emoji} <b>–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã –∏–∑–º–µ–Ω—ë–Ω</b>\n\n" .
            "–ö–æ–º–∞–Ω–¥–∞: <b>{$team['team_name']}</b>\n" .
            "–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: <b>" . ucfirst($status) . "</b>";
        
        if ($comment) {
            $message .= "\n\nüí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n{$comment}";
        }
        
        sendMessage($bot_token, $chat_id, $message);
        echo json_encode(['success' => true, 'message' => 'Status notification sent']);
    }
    
    elseif ($action === 'admin_comment') {
        $message = 
            "üí¨ <b>–ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n" .
            "–ö–æ–º–∞–Ω–¥–∞: <b>{$team['team_name']}</b>\n\n" .
            "<i>{$comment}</i>";
        
        sendMessage($bot_token, $chat_id, $message);
        echo json_encode(['success' => true, 'message' => 'Comment notification sent']);
    }
    
    elseif ($action === 'send_auth_code') {
        $message = 
            "üéâ <b>–ö–æ–º–∞–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!</b>\n\n" .
            "–ù–∞–∑–≤–∞–Ω–∏–µ: <b>{$team['team_name']}</b>\n" .
            "–ö–∞–ø–∏—Ç–∞–Ω: <b>{$team['captain_name']}</b>\n\n" .
            "üîë <b>–í–∞—à –∫–æ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b>\n" .
            "<code>{$team['auth_code']}</code>\n\n" .
            "üìã <b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>\n" .
            "‚Ä¢ –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥\n" .
            "‚Ä¢ –û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n" .
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /myteam –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞\n\n" .
            "–°—Ç–∞—Ç—É—Å: ‚è≥ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏";
        
        sendMessage($bot_token, $chat_id, $message);
        echo json_encode(['success' => true, 'message' => 'Auth code sent to captain']);
    }
    
    else {
        http_response_code(400);
        echo json_encode(['error' => 'Unknown action']);
    }
}
?>